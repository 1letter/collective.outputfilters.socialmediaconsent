const SHOW = "1";
const HIDE = "0";

let Consent = {
  yt: {
    value : HIDE,
    name : "cos-youtobe-consent"
  }
}

window.addEventListener("load", cos_init);

function cos_init(event){
    
  //initialize cookiehandling
  cookiehandling()
  
  if(Consent.yt.value == HIDE){
    // do nothing
    return
  }

  // check if cookie exists, then replace 
  // replace all placeholders with the markup from the contentfilter
  update_markup()
}

function cookiehandling(){
  // add click events to cookie consent checkboxes
  let checkboxes = document.querySelectorAll("input.socialmedia-consent-check");
  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("click", set_consent);
  });
  
  if (
    document.cookie.split(";").some((item) => item.trim().startsWith(Consent.yt.name+"="))
  ) {
    // Cookie exist
    if (document.cookie.split(";").some((item) => item.includes(Consent.yt.name + "=" + SHOW))) {
      console.log("Youttube Cookie SHOW");
      Consent.yt.value = SHOW;
    } else{
      console.log("Youttube Cookie HIDE");
      Consent.yt.value = HIDE;
    }

  } else{
    // Cookie don't exist
    // set the cookie with default value (HIDE)
    // this disable the rendering of youtube video iframes
    Consent.yt.value = HIDE;
    document.cookie = Consent.yt.name+"="+HIDE+";Secure";
  }
}

function set_consent(event){

  if (event.target.checked){
    show_youtube()
  } else{   
    hide_youtube()
  }

  console.log(Consent.yt.value)

  update_markup()

}

function show_youtube(){
  Consent.yt.value = SHOW;
  document.cookie = Consent.yt.name+"="+Consent.yt.value+";Secure";
}

function hide_youtube(){
  Consent.yt.value = HIDE;
  document.cookie = Consent.yt.name+"="+Consent.yt.value+";Secure";
}

function update_markup(){
  
  let markupElements = document.querySelectorAll("div[data-cos]");
  markupElements.forEach((markupElement) => {
    let options = JSON.parse(markupElement.dataset.cos)    
    let old_markup = markupElement.innerHTML
    let new_markup = options.markup
    markupElement.innerHTML = new_markup
    options.markup = old_markup
    
  });

}

function parseHTML(markup_as_string){
  var wrapper= document.createElement('div');
  wrapper.innerHTML= markup_as_string;
  return wrapper.firstChild
}